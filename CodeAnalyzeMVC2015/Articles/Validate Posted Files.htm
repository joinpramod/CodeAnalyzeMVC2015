<div style="font-size:16px;width:100%;font-family:Calibri">


<p style="width:80%">
    Create a viewmodel as shown below, here FileSize and FileTypes are custom attributes not inbuilt 
</p>

  
    <pre class="brush: csharp">
        public class ValidateFiles
        {
            [FileSize(10240)]
            [FileTypes("doc,docx,xlsx")]
            public HttpPostedFileBase File { get; set; }
        }
    </pre>

    <p>Create the custom FileSize and FileTypes by inheriting ValidationAttribute as shown below FileSize</p>
    <pre class="brush: csharp">
        public class FileSizeAttribute : ValidationAttribute
        {
            private readonly int _maxSize;
 
            public FileSizeAttribute(int maxSize)
            {
                _maxSize = maxSize;
            }
 
            public override bool IsValid(object value)
            {
                if (value == null) return true;
 
                return _maxSize > (value as HttpPostedFile).ContentLength;
            }
 
            public override string FormatErrorMessage(string name)
            {
                return string.Format("File size should be within {0}", _maxSize);
            }
        }
    </pre>


     <p>FileTypes</p>
    <pre class="brush: csharp">
        public class FileTypesAttribute : ValidationAttribute
        {
            private readonly List<string> _types;
 
            public FileTypesAttribute(string types)
            {
                _types = types.Split(',').ToList();
            }
 
            public override bool IsValid(object value)
            {
                if (value == null) return true;
 
                var fileExt = System.IO.Path.GetExtension((value as HttpPostedFile).FileName).Substring(1);
                return _types.Contains(fileExt, StringComparer.OrdinalIgnoreCase);
            }
 
            public override string FormatErrorMessage(string name)
            {
                return string.Format("Invalid file type. File Types supported are ", String.Join(", ", _types));
            }
        }
 
    </pre>


     <p>Then create the Controller as shown below</p>
    <pre class="brush: csharp">
        [HttpPost]
        public ActionResult UploadFiles(ValidateFiles fileModel)
        {
            string path = @"C:\Files\";
 
            if (ModelState.IsValid)
            {
                if (fileModel != null && fileModel.File != null)
                    files.SaveAs(path + fileModel.File.FileName);
 
                return RedirectToAction("Index");
            }
            return View();
        } 
    </pre>
    <br />
    <br />




</div>
